(()=>{function o(o,e){const n=[];return[[1,2],[2,1],[1,-2],[2,-1],[-1,2],[-2,1],[-2,-1],[-1,-2]].forEach((t=>{t[0]=t[0]+o,t[1]=t[1]+e,t[0]<8&&t[0]>=0&&t[1]<8&&t[1]>=0&&n.push(t)})),{x:o,y:e,mapped:n}}let e=function(){let e=new Map;for(let n=0;n<8;n++)for(let t=0;t<8;t++){let l=JSON.stringify([n,t]);e.set(l,o(n,t).mapped)}const n=(o,l,s=[],i=[],g=new Map,r=[])=>{if(0==i.length&&(r=o.slice(),console.log("original is below"),console.log(r)),i.push(o),o[0]==l[0]&&o[1]==l[1])return console.log(`we found a match and it's ${l}`),console.log("path is"),console.log(g),void t(g,l,r);{let t=e.get(JSON.stringify(o));for(let e=0;e<t.length;e++)i.includes(t[e])||s.includes(t[e])||(s.push(t[e]),null==g.get(JSON.stringify(t[e]))&&g.set(JSON.stringify(t[e]),o));if(console.log(`queue ${JSON.stringify(s)}`),console.log(`visisted ${JSON.stringify(i)}`),0!=s.length){let o=s.shift();return n(o,l,s,i,g,r)}}},t=(o,e,n)=>{let t=[e],l=e;for(console.log("me map is"),console.log(o),console.log(`node is ${JSON.stringify(l)}`),console.log(`parent is ${o.get(JSON.stringify(l))}`),console.log(o.get(JSON.stringify(l)));l[0]!=n[0]||l[1]!=n[1];){let e=o.get(JSON.stringify(l));t.unshift(e),l=e}console.log("FINAL PATH"),console.log(t)};return{board:e,knightMoves:n,getPath:t}}();e.board,e.knightMoves([3,3],[4,3])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQU9PLGNBQWFXLFVBQy9CLENBR2NhLEdBQ0ZoQyxFQUFRQyxNQUNwQkQsRUFBUVEsWUFBWSxDQUFDLEVBQUcsR0FBSSxDQUFDLEVBQUcsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2tuaWdodHMtdHJhdmFpbHMvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc3F1YXJlKHgsIHkpIHtcbiAgY29uc3QgbWFwcGVkID0gW107XG4gIGNvbnN0IGFycmF5ID0gW1xuICAgIFsxLCAyXSxcbiAgICBbMiwgMV0sXG4gICAgWzEsIC0yXSxcbiAgICBbMiwgLTFdLFxuICAgIFstMSwgMl0sXG4gICAgWy0yLCAxXSxcbiAgICBbLTIsIC0xXSxcbiAgICBbLTEsIC0yXSxcbiAgXTtcbiAgYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGl0ZW1bMF0gPSBpdGVtWzBdICsgeDtcbiAgICBpdGVtWzFdID0gaXRlbVsxXSArIHk7XG4gICAgLy8gY29uc29sZS5sb2coaXRlbSk7XG4gICAgaWYgKGl0ZW1bMF0gPCA4ICYmIGl0ZW1bMF0gPj0gMCAmJiBpdGVtWzFdIDwgOCAmJiBpdGVtWzFdID49IDApIHtcbiAgICAgIG1hcHBlZC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7IHgsIHksIG1hcHBlZCB9O1xufVxuXG5mdW5jdGlvbiBtYWtlQm9hcmQoaykge1xuICBsZXQgYm9hcmQgPSBuZXcgTWFwKCk7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgayArIDE7IHgrKykge1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgayArIDE7IHkrKykge1xuICAgICAgbGV0IG15S2V5ID0gSlNPTi5zdHJpbmdpZnkoW3gsIHldKTtcbiAgICAgIGJvYXJkLnNldChteUtleSwgc3F1YXJlKHgsIHkpLm1hcHBlZCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qga25pZ2h0TW92ZXMgPSAoXG4gICAgc3RhcnQsXG4gICAgZW5kLFxuICAgIHF1ZXVlID0gW10sXG4gICAgdmlzaXRlZCA9IFtdLFxuICAgIHBhdGggPSBuZXcgTWFwKCksXG4gICAgb3JpZ2luYWwgPSBbXVxuICApID0+IHtcbiAgICBpZiAodmlzaXRlZC5sZW5ndGggPT0gMCkge1xuICAgICAgLy90aGlzIGlzIHRoZSBmaXJzdCBpdGVyYXRpb25cbiAgICAgIG9yaWdpbmFsID0gc3RhcnQuc2xpY2UoKTtcbiAgICAgIGNvbnNvbGUubG9nKGBvcmlnaW5hbCBpcyBiZWxvd2ApO1xuICAgICAgY29uc29sZS5sb2cob3JpZ2luYWwpO1xuICAgIH1cbiAgICB2aXNpdGVkLnB1c2goc3RhcnQpO1xuICAgIGlmIChzdGFydFswXSA9PSBlbmRbMF0gJiYgc3RhcnRbMV0gPT0gZW5kWzFdKSB7XG4gICAgICAvL2RvZXMgc3RhcnQgPT0gZW5kXG4gICAgICBjb25zb2xlLmxvZyhgd2UgZm91bmQgYSBtYXRjaCBhbmQgaXQncyAke2VuZH1gKTtcbiAgICAgIGNvbnNvbGUubG9nKGBwYXRoIGlzYCk7XG4gICAgICBjb25zb2xlLmxvZyhwYXRoKTtcbiAgICAgIGdldFBhdGgocGF0aCwgZW5kLCBvcmlnaW5hbCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vZWxzZSwgYWRkIGFsbCB0aGUgZWRnZXMgdG8gdGhlIHF1ZXVlXG4gICAgICBsZXQgZWRnZXMgPSBib2FyZC5nZXQoSlNPTi5zdHJpbmdpZnkoc3RhcnQpKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCF2aXNpdGVkLmluY2x1ZGVzKGVkZ2VzW2ldKSAmJiAhcXVldWUuaW5jbHVkZXMoZWRnZXNbaV0pKSB7XG4gICAgICAgICAgcXVldWUucHVzaChlZGdlc1tpXSk7XG4gICAgICAgICAgaWYgKHBhdGguZ2V0KEpTT04uc3RyaW5naWZ5KGVkZ2VzW2ldKSkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXRoLnNldChKU09OLnN0cmluZ2lmeShlZGdlc1tpXSksIHN0YXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKGBxdWV1ZSAke0pTT04uc3RyaW5naWZ5KHF1ZXVlKX1gKTtcbiAgICAgIGNvbnNvbGUubG9nKGB2aXNpc3RlZCAke0pTT04uc3RyaW5naWZ5KHZpc2l0ZWQpfWApO1xuXG4gICAgICBpZiAocXVldWUubGVuZ3RoICE9IDApIHtcbiAgICAgICAgbGV0IG5leHQgPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICByZXR1cm4ga25pZ2h0TW92ZXMobmV4dCwgZW5kLCBxdWV1ZSwgdmlzaXRlZCwgcGF0aCwgb3JpZ2luYWwpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRQYXRoID0gKG1hcCwgZW5kLCBvcmlnaW5hbCkgPT4ge1xuICAgIGxldCBmaW5hbFBhdGggPSBbZW5kXTtcbiAgICBsZXQgbm9kZSA9IGVuZDtcbiAgICBjb25zb2xlLmxvZyhgbWUgbWFwIGlzYCk7XG4gICAgY29uc29sZS5sb2cobWFwKTtcbiAgICBjb25zb2xlLmxvZyhgbm9kZSBpcyAke0pTT04uc3RyaW5naWZ5KG5vZGUpfWApO1xuICAgIGNvbnNvbGUubG9nKGBwYXJlbnQgaXMgJHttYXAuZ2V0KEpTT04uc3RyaW5naWZ5KG5vZGUpKX1gKTtcbiAgICBjb25zb2xlLmxvZyhtYXAuZ2V0KEpTT04uc3RyaW5naWZ5KG5vZGUpKSk7XG5cbiAgICB3aGlsZSAobm9kZVswXSAhPSBvcmlnaW5hbFswXSB8fCBub2RlWzFdICE9IG9yaWdpbmFsWzFdKSB7XG4gICAgICAvLyAgIGNvbnNvbGUubG9nKGBub2RlIGlzICR7SlNPTi5zdHJpbmdpZnkobm9kZSl9YCk7XG4gICAgICAvLyAgIGNvbnNvbGUubG9nKGBwYXJlbnQgaXMgJHtKU09OLnN0cmluZ2lmeShtYXAuZ2V0KG5vZGUpKX1gKTtcbiAgICAgIGxldCBwYXJlbnQgPSBtYXAuZ2V0KEpTT04uc3RyaW5naWZ5KG5vZGUpKTtcbiAgICAgIGZpbmFsUGF0aC51bnNoaWZ0KHBhcmVudCk7XG4gICAgICBub2RlID0gcGFyZW50O1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIkZJTkFMIFBBVEhcIik7XG4gICAgY29uc29sZS5sb2coZmluYWxQYXRoKTtcbiAgfTtcblxuICAvLyAgIGZ1bmN0aW9uIGtuaWdodE1vdmVzKHN0YXJ0LCBlbmQsIHF1ZXVlID0gW3N0YXJ0XSwgcGF0aCA9IFtdKSB7XG4gIC8vICAgICBjb25zb2xlLmxvZyhgc3RhcnQsIGVuZCwgcXVldWUgWyR7c3RhcnR9XSwgWyR7ZW5kfV0sICR7cXVldWV9YCk7XG5cbiAgLy8gICAgIGlmIChxdWV1ZVswXVswXSA9PSBlbmRbMF0gJiYgcXVldWVbMF1bMV0gPT0gZW5kWzFdKSB7XG4gIC8vICAgICAgIGNvbnNvbGUubG9nKGBmb3VuZCBpdCBpdCdzICR7cXVldWVbMF19YCk7XG4gIC8vICAgICAgIHJldHVybjtcbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIC8vY29uc29sZS5sb2cocXVldWUpO1xuICAvLyAgICAgICBsZXQgeCA9IHF1ZXVlWzBdWzBdO1xuICAvLyAgICAgICBsZXQgeSA9IHF1ZXVlWzBdWzFdO1xuICAvLyAgICAgICBsZXQgcG9pbnQgPSBzcXVhcmUoeCwgeSk7XG4gIC8vICAgICAgIGxldCBlZGdlcyA9IHBvaW50Lm1hcHBlZDtcbiAgLy8gICAgICAgcXVldWUgPSBxdWV1ZS5jb25jYXQoZWRnZXMpO1xuICAvLyAgICAgICBsZXQgcGFyZW50ID0gcXVldWUuc2hpZnQoKTtcbiAgLy8gICAgICAga25pZ2h0TW92ZXMocXVldWVbMF0sIGVuZCwgcXVldWUsIHBhdGgpO1xuICAvLyAgICAgfVxuICAvLyAgIH1cblxuICByZXR1cm4geyBib2FyZCwga25pZ2h0TW92ZXMsIGdldFBhdGggfTtcbn1cblxuLy9URVNUSU5HXG5sZXQgbXlCb2FyZCA9IG1ha2VCb2FyZCg3KTtcbmxldCBteU1hcCA9IG15Qm9hcmQuYm9hcmQ7XG5teUJvYXJkLmtuaWdodE1vdmVzKFszLCAzXSwgWzQsIDNdKTtcbiJdLCJuYW1lcyI6WyJzcXVhcmUiLCJ4IiwieSIsIm1hcHBlZCIsImZvckVhY2giLCJpdGVtIiwicHVzaCIsIm15Qm9hcmQiLCJib2FyZCIsIk1hcCIsImsiLCJteUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXQiLCJrbmlnaHRNb3ZlcyIsInN0YXJ0IiwiZW5kIiwicXVldWUiLCJ2aXNpdGVkIiwicGF0aCIsIm9yaWdpbmFsIiwibGVuZ3RoIiwic2xpY2UiLCJjb25zb2xlIiwibG9nIiwiZ2V0UGF0aCIsImVkZ2VzIiwiZ2V0IiwiaSIsImluY2x1ZGVzIiwidW5kZWZpbmVkIiwibmV4dCIsInNoaWZ0IiwibWFwIiwiZmluYWxQYXRoIiwibm9kZSIsInBhcmVudCIsInVuc2hpZnQiLCJtYWtlQm9hcmQiXSwic291cmNlUm9vdCI6IiJ9